#------------------------------------------------------------------------------
# Copyright (c) 2005, Enthought, Inc.
# All rights reserved.
#
# This software is provided without warranty under the terms of the BSD
# license included in LICENSE.txt and may be redistributed only
# under the conditions described in the aforementioned license.  The license
# is also available online at http://www.enthought.com/licenses/BSD.txt
# Thanks for using Enthought open source!
#
# Portions of this software are:
# Copyright (c) 2002-2004 John D. Hunter
# All Rights Reserved.
#------------------------------------------------------------------------------

"""
A collection of pre-defined colormap generator functions.

Each of the functions can be called with *min_value* and *max_value* parameters.
In that case, they produce a Colormap which linearly maps over the specified 
range and has the color palette indicated by the function name.
"""

from numpy import array

# Local imports.
from color_mapper import ColorMapper


def autumn(range, **traits):
    """ Generator function for the 'autumn' colormap. """

    _data = {'red':   ((0., 1.0, 1.0),(1.0, 1.0, 1.0)),
             'green': ((0., 0., 0.),(1.0, 1.0, 1.0)),
             'blue':  ((0., 0., 0.),(1.0, 0., 0.))}                  

    return ColorMapper.from_segment_map(_data, range=range)

    
def bone(range, **traits):
    """ Generator function for the 'bone' colormap. """
    
    _data = {'red':   ((0., 0., 0.),(1.0, 1.0, 1.0)),
             'green': ((0., 0., 0.),(1.0, 1.0, 1.0)),
             'blue':  ((0., 0., 0.),(1.0, 1.0, 1.0))}

    return ColorMapper.from_segment_map(_data, range=range)

def cool(range, **traits):
    """ Generator function for the 'cool' colormap. """
    
    _data = {'red':   ((0., 0., 0.), (1.0, 1.0, 1.0)),
              'green': ((0., 1., 1.), (1.0, 0.,  0.)),
              'blue':  ((0., 1., 1.), (1.0, 1.,  1.))}

    return ColorMapper.from_segment_map(_data, range=range)

def copper(range, **traits):
    """ Generator function for the 'copper' colormap. """
    
    _data = {'red':   ((0., 0., 0.),(0.809524, 1.000000, 1.000000),(1.0, 1.0, 1.0)),
             'green': ((0., 0., 0.),(1.0, 0.7812, 0.7812)),
             'blue':  ((0., 0., 0.),(1.0, 0.4975, 0.4975))}                  

    return ColorMapper.from_segment_map(_data, range=range)

def flag(range, **traits):
    """ Generator function for the 'flag' colormap. """

    _data = {'red':   ((0., 1., 1.),(0.015873, 1.000000, 1.000000),
                       (0.031746, 0.000000, 0.000000),(0.047619, 0.000000, 0.000000),
                       (0.063492, 1.000000, 1.000000),(0.079365, 1.000000, 1.000000),
                       (0.095238, 0.000000, 0.000000),(0.111111, 0.000000, 0.000000),
                       (0.126984, 1.000000, 1.000000),(0.142857, 1.000000, 1.000000),
                       (0.158730, 0.000000, 0.000000),(0.174603, 0.000000, 0.000000),
                       (0.190476, 1.000000, 1.000000),(0.206349, 1.000000, 1.000000),
                       (0.222222, 0.000000, 0.000000),(0.238095, 0.000000, 0.000000),
                       (0.253968, 1.000000, 1.000000),(0.269841, 1.000000, 1.000000),
                       (0.285714, 0.000000, 0.000000),(0.301587, 0.000000, 0.000000),
                       (0.317460, 1.000000, 1.000000),(0.333333, 1.000000, 1.000000),
                       (0.349206, 0.000000, 0.000000),(0.365079, 0.000000, 0.000000),
                       (0.380952, 1.000000, 1.000000),(0.396825, 1.000000, 1.000000),
                       (0.412698, 0.000000, 0.000000),(0.428571, 0.000000, 0.000000),
                       (0.444444, 1.000000, 1.000000),(0.460317, 1.000000, 1.000000),
                       (0.476190, 0.000000, 0.000000),(0.492063, 0.000000, 0.000000),
                       (0.507937, 1.000000, 1.000000),(0.523810, 1.000000, 1.000000),
                       (0.539683, 0.000000, 0.000000),(0.555556, 0.000000, 0.000000),
                       (0.571429, 1.000000, 1.000000),(0.587302, 1.000000, 1.000000),
                       (0.603175, 0.000000, 0.000000),(0.619048, 0.000000, 0.000000),
                       (0.634921, 1.000000, 1.000000),(0.650794, 1.000000, 1.000000),
                       (0.666667, 0.000000, 0.000000),(0.682540, 0.000000, 0.000000),
                       (0.698413, 1.000000, 1.000000),(0.714286, 1.000000, 1.000000),
                       (0.730159, 0.000000, 0.000000),(0.746032, 0.000000, 0.000000),
                       (0.761905, 1.000000, 1.000000),(0.777778, 1.000000, 1.000000),
                       (0.793651, 0.000000, 0.000000),(0.809524, 0.000000, 0.000000),
                       (0.825397, 1.000000, 1.000000),(0.841270, 1.000000, 1.000000),
                       (0.857143, 0.000000, 0.000000),(0.873016, 0.000000, 0.000000),
                       (0.888889, 1.000000, 1.000000),(0.904762, 1.000000, 1.000000),
                       (0.920635, 0.000000, 0.000000),(0.936508, 0.000000, 0.000000),
                       (0.952381, 1.000000, 1.000000),(0.968254, 1.000000, 1.000000),
                       (0.984127, 0.000000, 0.000000),(1.0, 0., 0.)),
             'green': ((0., 0., 0.),(0.015873, 1.000000, 1.000000),
                       (0.031746, 0.000000, 0.000000),(0.063492, 0.000000, 0.000000),
                       (0.079365, 1.000000, 1.000000),(0.095238, 0.000000, 0.000000),
                       (0.126984, 0.000000, 0.000000),(0.142857, 1.000000, 1.000000),
                       (0.158730, 0.000000, 0.000000),(0.190476, 0.000000, 0.000000),
                       (0.206349, 1.000000, 1.000000),(0.222222, 0.000000, 0.000000),
                       (0.253968, 0.000000, 0.000000),(0.269841, 1.000000, 1.000000),
                       (0.285714, 0.000000, 0.000000),(0.317460, 0.000000, 0.000000),
                       (0.333333, 1.000000, 1.000000),(0.349206, 0.000000, 0.000000),
                       (0.380952, 0.000000, 0.000000),(0.396825, 1.000000, 1.000000),
                       (0.412698, 0.000000, 0.000000),(0.444444, 0.000000, 0.000000),
                       (0.460317, 1.000000, 1.000000),(0.476190, 0.000000, 0.000000),
                       (0.507937, 0.000000, 0.000000),(0.523810, 1.000000, 1.000000),
                       (0.539683, 0.000000, 0.000000),(0.571429, 0.000000, 0.000000),
                       (0.587302, 1.000000, 1.000000),(0.603175, 0.000000, 0.000000),
                       (0.634921, 0.000000, 0.000000),(0.650794, 1.000000, 1.000000),
                       (0.666667, 0.000000, 0.000000),(0.698413, 0.000000, 0.000000),
                       (0.714286, 1.000000, 1.000000),(0.730159, 0.000000, 0.000000),
                       (0.761905, 0.000000, 0.000000),(0.777778, 1.000000, 1.000000),
                       (0.793651, 0.000000, 0.000000),(0.825397, 0.000000, 0.000000),
                        (0.841270, 1.000000, 1.000000),(0.857143, 0.000000, 0.000000),
                       (0.888889, 0.000000, 0.000000),(0.904762, 1.000000, 1.000000),
                       (0.920635, 0.000000, 0.000000),(0.952381, 0.000000, 0.000000),
                       (0.968254, 1.000000, 1.000000),(0.984127, 0.000000, 0.000000),
                       (1.0, 0., 0.)),
             'blue':  ((0., 0., 0.),(0.015873, 1.000000, 1.000000),
                       (0.031746, 1.000000, 1.000000),(0.047619, 0.000000, 0.000000),
                       (0.063492, 0.000000, 0.000000),(0.079365, 1.000000, 1.000000),
                       (0.095238, 1.000000, 1.000000),(0.111111, 0.000000, 0.000000),
                       (0.126984, 0.000000, 0.000000),(0.142857, 1.000000, 1.000000),
                       (0.158730, 1.000000, 1.000000),(0.174603, 0.000000, 0.000000),
                       (0.190476, 0.000000, 0.000000),(0.206349, 1.000000, 1.000000),
                       (0.222222, 1.000000, 1.000000),(0.238095, 0.000000, 0.000000),
                       (0.253968, 0.000000, 0.000000),(0.269841, 1.000000, 1.000000),
                       (0.285714, 1.000000, 1.000000),(0.301587, 0.000000, 0.000000),
                       (0.317460, 0.000000, 0.000000),(0.333333, 1.000000, 1.000000),
                       (0.349206, 1.000000, 1.000000),(0.365079, 0.000000, 0.000000),
                       (0.380952, 0.000000, 0.000000),(0.396825, 1.000000, 1.000000),
                       (0.412698, 1.000000, 1.000000),(0.428571, 0.000000, 0.000000),
                       (0.444444, 0.000000, 0.000000),(0.460317, 1.000000, 1.000000),
                       (0.476190, 1.000000, 1.000000),(0.492063, 0.000000, 0.000000),
                       (0.507937, 0.000000, 0.000000),(0.523810, 1.000000, 1.000000),
                       (0.539683, 1.000000, 1.000000),(0.555556, 0.000000, 0.000000),
                       (0.571429, 0.000000, 0.000000),(0.587302, 1.000000, 1.000000),
                       (0.603175, 1.000000, 1.000000),(0.619048, 0.000000, 0.000000),
                       (0.634921, 0.000000, 0.000000),(0.650794, 1.000000, 1.000000),
                       (0.666667, 1.000000, 1.000000),(0.682540, 0.000000, 0.000000),
                       (0.698413, 0.000000, 0.000000),(0.714286, 1.000000, 1.000000),
                       (0.730159, 1.000000, 1.000000),(0.746032, 0.000000, 0.000000),
                       (0.761905, 0.000000, 0.000000),(0.777778, 1.000000, 1.000000),
                       (0.793651, 1.000000, 1.000000),(0.809524, 0.000000, 0.000000),
                       (0.825397, 0.000000, 0.000000),(0.841270, 1.000000, 1.000000),
                       (0.857143, 1.000000, 1.000000),(0.873016, 0.000000, 0.000000),
                       (0.888889, 0.000000, 0.000000),(0.904762, 1.000000, 1.000000),
                       (0.920635, 1.000000, 1.000000),(0.936508, 0.000000, 0.000000),
                       (0.952381, 0.000000, 0.000000),(0.968254, 1.000000, 1.000000),
                       (0.984127, 1.000000, 1.000000),(1.0, 0., 0.))}  

    return ColorMapper.from_segment_map(_data, range=range)
    
def gray(range, **traits):
    """ Generator function for the 'hot' colormap. """

    _data =  {'red':   ((0., 0, 0), (1., 1, 1)),
              'green': ((0., 0, 0), (1., 1, 1)),
              'blue':  ((0., 0, 0), (1., 1, 1))}      

    return ColorMapper.from_segment_map(_data, range=range)

def hot(range, **traits):
    """ Generator function for the 'hot' colormap. """

    _data = {'red':   ((0., 0.0416, 0.0416),(0.365079, 1.000000, 1.000000),(1.0, 1.0, 1.0)),
             'green': ((0., 0., 0.),(0.365079, 0.000000, 0.000000),
                       (0.746032, 1.000000, 1.000000),(1.0, 1.0, 1.0)),
             'blue':  ((0., 0., 0.),(0.746032, 0.000000, 0.000000),(1.0, 1.0, 1.0))}

    return ColorMapper.from_segment_map(_data, range=range)
        
def hsv(range, **traits):
    """ Generator function for the 'hsv' colormap. """

    _data = {'red':   ((0., 1., 1.),(0.158730, 1.000000, 1.000000),
                       (0.174603, 0.968750, 0.968750),(0.333333, 0.031250, 0.031250),
                       (0.349206, 0.000000, 0.000000),(0.666667, 0.000000, 0.000000),
                       (0.682540, 0.031250, 0.031250),(0.841270, 0.968750, 0.968750),
                       (0.857143, 1.000000, 1.000000),(1.0, 1.0, 1.0)),
             'green': ((0., 0., 0.),(0.158730, 0.937500, 0.937500),
                       (0.174603, 1.000000, 1.000000),(0.507937, 1.000000, 1.000000),
                       (0.666667, 0.062500, 0.062500),(0.682540, 0.000000, 0.000000),
                       (1.0, 0., 0.)),
             'blue':  ((0., 0., 0.),(0.333333, 0.000000, 0.000000),
                       (0.349206, 0.062500, 0.062500),(0.507937, 1.000000, 1.000000),
                       (0.841270, 1.000000, 1.000000),(0.857143, 0.937500, 0.937500),
                       (1.0, 0.09375, 0.09375))} 

    return ColorMapper.from_segment_map(_data, range=range)

def jet(range, **traits):
    """ Generator function for the 'jet' colormap. """

    _data =   {'red':   ((0., 0, 0), (0.35, 0, 0), (0.66, 1, 1), (0.89,1, 1), 
                         (1, 0.5, 0.5)),
               'green': ((0., 0, 0), (0.125,0, 0), (0.375,1, 1), (0.64,1, 1),
                         (0.91,0,0), (1, 0, 0)),   
               'blue':  ((0., 0.5, 0.5), (0.11, 1, 1), (0.34, 1, 1), (0.65,0, 0),
                         (1, 0, 0))}
    
    return ColorMapper.from_segment_map(_data, range=range)

def pink(range, **traits):
    """ Generator function for the 'pink' colormap. """

    _data = {'red':   ((0., 0.1178, 0.1178),(0.015873, 0.195857, 0.195857),
                       (0.031746, 0.250661, 0.250661),(0.047619, 0.295468, 0.295468),
                       (0.063492, 0.334324, 0.334324),(0.079365, 0.369112, 0.369112),
                       (0.095238, 0.400892, 0.400892),(0.111111, 0.430331, 0.430331),
                       (0.126984, 0.457882, 0.457882),(0.142857, 0.483867, 0.483867),
                       (0.158730, 0.508525, 0.508525),(0.174603, 0.532042, 0.532042),
                       (0.190476, 0.554563, 0.554563),(0.206349, 0.576204, 0.576204),
                       (0.222222, 0.597061, 0.597061),(0.238095, 0.617213, 0.617213),
                       (0.253968, 0.636729, 0.636729),(0.269841, 0.655663, 0.655663),
                       (0.285714, 0.674066, 0.674066),(0.301587, 0.691980, 0.691980),
                       (0.317460, 0.709441, 0.709441),(0.333333, 0.726483, 0.726483),
                       (0.349206, 0.743134, 0.743134),(0.365079, 0.759421, 0.759421),
                       (0.380952, 0.766356, 0.766356),(0.396825, 0.773229, 0.773229),
                       (0.412698, 0.780042, 0.780042),(0.428571, 0.786796, 0.786796),
                       (0.444444, 0.793492, 0.793492),(0.460317, 0.800132, 0.800132),
                       (0.476190, 0.806718, 0.806718),(0.492063, 0.813250, 0.813250),
                       (0.507937, 0.819730, 0.819730),(0.523810, 0.826160, 0.826160),
                       (0.539683, 0.832539, 0.832539),(0.555556, 0.838870, 0.838870),
                       (0.571429, 0.845154, 0.845154),(0.587302, 0.851392, 0.851392),
                       (0.603175, 0.857584, 0.857584),(0.619048, 0.863731, 0.863731),
                       (0.634921, 0.869835, 0.869835),(0.650794, 0.875897, 0.875897),
                       (0.666667, 0.881917, 0.881917),(0.682540, 0.887896, 0.887896),
                       (0.698413, 0.893835, 0.893835),(0.714286, 0.899735, 0.899735),
                       (0.730159, 0.905597, 0.905597),(0.746032, 0.911421, 0.911421),
                       (0.761905, 0.917208, 0.917208),(0.777778, 0.922958, 0.922958),
                       (0.793651, 0.928673, 0.928673),(0.809524, 0.934353, 0.934353),
                       (0.825397, 0.939999, 0.939999),(0.841270, 0.945611, 0.945611),
                       (0.857143, 0.951190, 0.951190),(0.873016, 0.956736, 0.956736),
                       (0.888889, 0.962250, 0.962250),(0.904762, 0.967733, 0.967733),
                       (0.920635, 0.973185, 0.973185),(0.936508, 0.978607, 0.978607),
                       (0.952381, 0.983999, 0.983999),(0.968254, 0.989361, 0.989361),
                       (0.984127, 0.994695, 0.994695),(1.0, 1.0, 1.0)),
             'green': ((0., 0., 0.),(0.015873, 0.102869, 0.102869),
                       (0.031746, 0.145479, 0.145479),(0.047619, 0.178174, 0.178174),
                       (0.063492, 0.205738, 0.205738),(0.079365, 0.230022, 0.230022),
                       (0.095238, 0.251976, 0.251976),(0.111111, 0.272166, 0.272166),
                       (0.126984, 0.290957, 0.290957),(0.142857, 0.308607, 0.308607),
                       (0.158730, 0.325300, 0.325300),(0.174603, 0.341178, 0.341178),
                       (0.190476, 0.356348, 0.356348),(0.206349, 0.370899, 0.370899),
                       (0.222222, 0.384900, 0.384900),(0.238095, 0.398410, 0.398410),
                       (0.253968, 0.411476, 0.411476),(0.269841, 0.424139, 0.424139),
                       (0.285714, 0.436436, 0.436436),(0.301587, 0.448395, 0.448395),
                       (0.317460, 0.460044, 0.460044),(0.333333, 0.471405, 0.471405),
                       (0.349206, 0.482498, 0.482498),(0.365079, 0.493342, 0.493342),
                       (0.380952, 0.517549, 0.517549),(0.396825, 0.540674, 0.540674),
                       (0.412698, 0.562849, 0.562849),(0.428571, 0.584183, 0.584183),
                       (0.444444, 0.604765, 0.604765),(0.460317, 0.624669, 0.624669),
                       (0.476190, 0.643958, 0.643958),(0.492063, 0.662687, 0.662687),
                       (0.507937, 0.680900, 0.680900),(0.523810, 0.698638, 0.698638),
                       (0.539683, 0.715937, 0.715937),(0.555556, 0.732828, 0.732828),
                       (0.571429, 0.749338, 0.749338),(0.587302, 0.765493, 0.765493),
                       (0.603175, 0.781313, 0.781313),(0.619048, 0.796819, 0.796819),
                       (0.634921, 0.812029, 0.812029),(0.650794, 0.826960, 0.826960),
                       (0.666667, 0.841625, 0.841625),(0.682540, 0.856040, 0.856040),
                       (0.698413, 0.870216, 0.870216),(0.714286, 0.884164, 0.884164),
                       (0.730159, 0.897896, 0.897896),(0.746032, 0.911421, 0.911421),
                       (0.761905, 0.917208, 0.917208),(0.777778, 0.922958, 0.922958),
                       (0.793651, 0.928673, 0.928673),(0.809524, 0.934353, 0.934353),
                       (0.825397, 0.939999, 0.939999),(0.841270, 0.945611, 0.945611),
                       (0.857143, 0.951190, 0.951190),(0.873016, 0.956736, 0.956736),
                       (0.888889, 0.962250, 0.962250),(0.904762, 0.967733, 0.967733),
                       (0.920635, 0.973185, 0.973185),(0.936508, 0.978607, 0.978607),
                       (0.952381, 0.983999, 0.983999),(0.968254, 0.989361, 0.989361),
                       (0.984127, 0.994695, 0.994695),(1.0, 1.0, 1.0)),
             'blue':  ((0., 0., 0.),(0.015873, 0.102869, 0.102869),
                       (0.031746, 0.145479, 0.145479),(0.047619, 0.178174, 0.178174),
                       (0.063492, 0.205738, 0.205738),(0.079365, 0.230022, 0.230022),
                       (0.095238, 0.251976, 0.251976),(0.111111, 0.272166, 0.272166),
                       (0.126984, 0.290957, 0.290957),(0.142857, 0.308607, 0.308607),
                       (0.158730, 0.325300, 0.325300),(0.174603, 0.341178, 0.341178),
                       (0.190476, 0.356348, 0.356348),(0.206349, 0.370899, 0.370899),
                       (0.222222, 0.384900, 0.384900),(0.238095, 0.398410, 0.398410),
                       (0.253968, 0.411476, 0.411476),(0.269841, 0.424139, 0.424139),
                       (0.285714, 0.436436, 0.436436),(0.301587, 0.448395, 0.448395),
                       (0.317460, 0.460044, 0.460044),(0.333333, 0.471405, 0.471405),
                       (0.349206, 0.482498, 0.482498),(0.365079, 0.493342, 0.493342),
                       (0.380952, 0.503953, 0.503953),(0.396825, 0.514344, 0.514344),
                       (0.412698, 0.524531, 0.524531),(0.428571, 0.534522, 0.534522),
                       (0.444444, 0.544331, 0.544331),(0.460317, 0.553966, 0.553966),
                       (0.476190, 0.563436, 0.563436),(0.492063, 0.572750, 0.572750),
                       (0.507937, 0.581914, 0.581914),(0.523810, 0.590937, 0.590937),
                       (0.539683, 0.599824, 0.599824),(0.555556, 0.608581, 0.608581),
                       (0.571429, 0.617213, 0.617213),(0.587302, 0.625727, 0.625727),
                       (0.603175, 0.634126, 0.634126),(0.619048, 0.642416, 0.642416),
                       (0.634921, 0.650600, 0.650600),(0.650794, 0.658682, 0.658682),
                       (0.666667, 0.666667, 0.666667),(0.682540, 0.674556, 0.674556),
                       (0.698413, 0.682355, 0.682355),(0.714286, 0.690066, 0.690066),
                       (0.730159, 0.697691, 0.697691),(0.746032, 0.705234, 0.705234),
                       (0.761905, 0.727166, 0.727166),(0.777778, 0.748455, 0.748455),
                       (0.793651, 0.769156, 0.769156),(0.809524, 0.789314, 0.789314),
                       (0.825397, 0.808969, 0.808969),(0.841270, 0.828159, 0.828159),
                       (0.857143, 0.846913, 0.846913),(0.873016, 0.865261, 0.865261),
                       (0.888889, 0.883229, 0.883229),(0.904762, 0.900837, 0.900837),
                       (0.920635, 0.918109, 0.918109),(0.936508, 0.935061, 0.935061),
                       (0.952381, 0.951711, 0.951711),(0.968254, 0.968075, 0.968075),
                       (0.984127, 0.984167, 0.984167),(1.0, 1.0, 1.0))}                  
    
    return ColorMapper.from_segment_map(_data, range=range)

def prism(range, **traits):
    """ Generator function for the 'prism' colormap. """

    _data = {'red':   ((0., 1., 1.),(0.031746, 1.000000, 1.000000),
                       (0.047619, 0.000000, 0.000000),(0.063492, 0.000000, 0.000000),
                       (0.079365, 0.666667, 0.666667),(0.095238, 1.000000, 1.000000),
                       (0.126984, 1.000000, 1.000000),(0.142857, 0.000000, 0.000000),
                       (0.158730, 0.000000, 0.000000),(0.174603, 0.666667, 0.666667),
                       (0.190476, 1.000000, 1.000000),(0.222222, 1.000000, 1.000000),
                       (0.238095, 0.000000, 0.000000),(0.253968, 0.000000, 0.000000),
                       (0.269841, 0.666667, 0.666667),(0.285714, 1.000000, 1.000000),
                       (0.317460, 1.000000, 1.000000),(0.333333, 0.000000, 0.000000),
                       (0.349206, 0.000000, 0.000000),(0.365079, 0.666667, 0.666667),
                       (0.380952, 1.000000, 1.000000),(0.412698, 1.000000, 1.000000),
                       (0.428571, 0.000000, 0.000000),(0.444444, 0.000000, 0.000000),
                       (0.460317, 0.666667, 0.666667),(0.476190, 1.000000, 1.000000),
                       (0.507937, 1.000000, 1.000000),(0.523810, 0.000000, 0.000000),
                       (0.539683, 0.000000, 0.000000),(0.555556, 0.666667, 0.666667),
                       (0.571429, 1.000000, 1.000000),(0.603175, 1.000000, 1.000000),
                       (0.619048, 0.000000, 0.000000),(0.634921, 0.000000, 0.000000),
                       (0.650794, 0.666667, 0.666667),(0.666667, 1.000000, 1.000000),
                       (0.698413, 1.000000, 1.000000),(0.714286, 0.000000, 0.000000),
                       (0.730159, 0.000000, 0.000000),(0.746032, 0.666667, 0.666667),
                       (0.761905, 1.000000, 1.000000),(0.793651, 1.000000, 1.000000),
                       (0.809524, 0.000000, 0.000000),(0.825397, 0.000000, 0.000000),
                       (0.841270, 0.666667, 0.666667),(0.857143, 1.000000, 1.000000),
                       (0.888889, 1.000000, 1.000000),(0.904762, 0.000000, 0.000000),      
                       (0.920635, 0.000000, 0.000000),(0.936508, 0.666667, 0.666667),
                       (0.952381, 1.000000, 1.000000),(0.984127, 1.000000, 1.000000),
                       (1.0, 0.0, 0.0)),
             'green': ((0., 0., 0.),(0.031746, 1.000000, 1.000000),
                       (0.047619, 1.000000, 1.000000),(0.063492, 0.000000, 0.000000),
                       (0.095238, 0.000000, 0.000000),(0.126984, 1.000000, 1.000000),
                       (0.142857, 1.000000, 1.000000),(0.158730, 0.000000, 0.000000),
                       (0.190476, 0.000000, 0.000000),(0.222222, 1.000000, 1.000000),
                       (0.238095, 1.000000, 1.000000),(0.253968, 0.000000, 0.000000),
                       (0.285714, 0.000000, 0.000000),(0.317460, 1.000000, 1.000000),
                       (0.333333, 1.000000, 1.000000),(0.349206, 0.000000, 0.000000),
                       (0.380952, 0.000000, 0.000000),(0.412698, 1.000000, 1.000000),
                       (0.428571, 1.000000, 1.000000),(0.444444, 0.000000, 0.000000),
                       (0.476190, 0.000000, 0.000000),(0.507937, 1.000000, 1.000000),
                       (0.523810, 1.000000, 1.000000),(0.539683, 0.000000, 0.000000),
                       (0.571429, 0.000000, 0.000000),(0.603175, 1.000000, 1.000000),
                       (0.619048, 1.000000, 1.000000),(0.634921, 0.000000, 0.000000),
                       (0.666667, 0.000000, 0.000000),(0.698413, 1.000000, 1.000000),
                       (0.714286, 1.000000, 1.000000),(0.730159, 0.000000, 0.000000),
                       (0.761905, 0.000000, 0.000000),(0.793651, 1.000000, 1.000000),
                       (0.809524, 1.000000, 1.000000),(0.825397, 0.000000, 0.000000),
                       (0.857143, 0.000000, 0.000000),(0.888889, 1.000000, 1.000000),
                       (0.904762, 1.000000, 1.000000),(0.920635, 0.000000, 0.000000),
                       (0.952381, 0.000000, 0.000000),(0.984127, 1.000000, 1.000000),
                       (1.0, 1.0, 1.0)),
             'blue':  ((0., 0., 0.),(0.047619, 0.000000, 0.000000),
                       (0.063492, 1.000000, 1.000000),(0.079365, 1.000000, 1.000000),
                       (0.095238, 0.000000, 0.000000),(0.142857, 0.000000, 0.000000),
                       (0.158730, 1.000000, 1.000000),(0.174603, 1.000000, 1.000000),
                       (0.190476, 0.000000, 0.000000),(0.238095, 0.000000, 0.000000),
                       (0.253968, 1.000000, 1.000000),(0.269841, 1.000000, 1.000000),
                       (0.285714, 0.000000, 0.000000),(0.333333, 0.000000, 0.000000),
                       (0.349206, 1.000000, 1.000000),(0.365079, 1.000000, 1.000000),
                       (0.380952, 0.000000, 0.000000),(0.428571, 0.000000, 0.000000),
                       (0.444444, 1.000000, 1.000000),(0.460317, 1.000000, 1.000000),
                       (0.476190, 0.000000, 0.000000),(0.523810, 0.000000, 0.000000),
                       (0.539683, 1.000000, 1.000000),(0.555556, 1.000000, 1.000000),
                       (0.571429, 0.000000, 0.000000),(0.619048, 0.000000, 0.000000),
                       (0.634921, 1.000000, 1.000000),(0.650794, 1.000000, 1.000000),
                       (0.666667, 0.000000, 0.000000),(0.714286, 0.000000, 0.000000),
                       (0.730159, 1.000000, 1.000000),(0.746032, 1.000000, 1.000000),
                       (0.761905, 0.000000, 0.000000),(0.809524, 0.000000, 0.000000),
                       (0.825397, 1.000000, 1.000000),(0.841270, 1.000000, 1.000000),
                       (0.857143, 0.000000, 0.000000),(0.904762, 0.000000, 0.000000),
                       (0.920635, 1.000000, 1.000000),(0.936508, 1.000000, 1.000000),
                       (0.952381, 0.000000, 0.000000),(1.0, 0.0, 0.0))}                  
    
    return ColorMapper.from_segment_map(_data, range=range)

def spring(range, **traits):
    """ Generator function for the 'spring' colormap. """

    _data = {'red':   ((0., 1., 1.),(1.0, 1.0, 1.0)),
             'green': ((0., 0., 0.),(1.0, 1.0, 1.0)),
             'blue':  ((0., 1., 1.),(1.0, 0.0, 0.0))}                  
    
    return ColorMapper.from_segment_map(_data, range=range)

def summer(range, **traits):
    """ Generator function for the 'spring' colormap. """

    _data = {'red':   ((0., 0., 0.),(1.0, 1.0, 1.0)),
             'green': ((0., 0.5, 0.5),(1.0, 1.0, 1.0)),
             'blue':  ((0., 0.4, 0.4),(1.0, 0.4, 0.4))}                  

    return ColorMapper.from_segment_map(_data, range=range)

def winter(range, **traits):
    """ Generator function for the 'spring' colormap. """

    _data = {'red':   ((0., 0., 0.),(1.0, 0.0, 0.0)),
             'green': ((0., 0., 0.),(1.0, 1.0, 1.0)),
             'blue':  ((0., 1., 1.),(1.0, 0.5, 0.5))}                  
    
    return ColorMapper.from_segment_map(_data, range=range)

def cw1_004(range, **traits):
    """ Generator function for the Crumblingwalls cw1-004 gradient """

    colors = array([(0.7176,0.6980,0.6118),
                  (0.8000,0.5373,0.7059),
                  (0.2510,0.4588,0.4902),
                  (0.0588,0.3176,0.5137)])
    
    return ColorMapper.from_palette_array(colors, range=range)

def cw1_005(range, **traits):
    """ Generator function for the Crumblingwalls cw1-005 gradient """
    colors = array([(0.7059,0.1686,0.0980),
                    (0.7961,0.5176,0.2039),
                    (0.2863,0.3255,0.1294)])

    return ColorMapper.from_palette_array(colors, range=range)

def cw1_006(range, **traits):
    """ Generator function for the Crumblingwalls cw1-006 gradient """

    colors = array([(0.4275,0.2824,0.4667),
                    (0.2039,0.1843,0.4667),
                    (0.0863,0.4078,0.2078)])

    return ColorMapper.from_palette_array(colors, range=range)

def cw1_028(range, **traits):
    """ Generator function for the Crumblingwalls cw1-058 gradient """

    colors = array([(0.2275, 0.2275, 0.4784),
                    (0.3294, 0.5137, 0.8588),
                    (0.4078, 0.8471, 0.8510)])

    return ColorMapper.from_palette_array(colors, range=range)

def gmt_drywet(range, **traits):

    _data = {'red': ((0.00000,0.5255,0.5255),
                    (0.16670,0.9333,0.9333),
                    (0.33330,0.7059,0.7059),
                    (0.50000,0.1961,0.1961),
                    (0.66670,0.0471,0.0471),
                    (0.83330,0.1490,0.1490),
                    (1.00000,0.0314,0.0314)),

             'green': ((0.00000,0.3804,0.3804),
                    (0.16670,0.7804,0.7804),
                    (0.33330,0.9333,0.9333),
                    (0.50000,0.9333,0.9333),
                    (0.66670,0.4706,0.4706),
                    (0.83330,0.0039,0.0039),
                    (1.00000,0.2000,0.2000)),

             'blue': ((0.00000,0.1647,0.1647),
                    (0.16670,0.3922,0.3922),
                    (0.33330,0.5294,0.5294),
                    (0.50000,0.9216,0.9216),
                    (0.66670,0.9333,0.9333),
                    (0.83330,0.7176,0.7176),
                    (1.00000,0.4431,0.4431)) }

    return ColorMapper.from_segment_map(_data, range=range)
    

# Make the convenient list of all the function names as well as a dictionary
# of name->function mappings.  These are useful for UI editors.

color_map_functions = [jet, autumn, bone, cool, copper, flag, gray, hot, \
                       hsv, pink, prism, spring, summer, winter, \
                       cw1_004, cw1_005, cw1_006, cw1_028, gmt_drywet]

color_map_dict = {}
for func in color_map_functions:
    color_map_dict[func] = func.__name__

color_map_name_dict = {}
for func in color_map_functions:
    color_map_name_dict[func.__name__] = func

#### EOF ######################################################################
